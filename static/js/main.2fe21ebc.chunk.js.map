{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","cn","TodoList","todos","map","todosWithUsers","userId","usersFromServer","find","App","useState","setTodos","setTitle","userName","setUserName","hasTitleError","setIsEmptyTitle","hasUserError","setIsEmptyUser","nextId","todosIds","Math","max","onSubmit","event","preventDefault","selectUser","newTodo","trim","current","action","method","type","placeholder","value","onChange","target","replace","defaultValue","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fe21ebc.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","type Props = {\n  user: User\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo',\n        { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList:React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nconst todosWithUsers = todosFromServer.map((todo) => {\n  return {\n    ...todo,\n    user: usersFromServer.find(user => user.id === todo.userId) || null,\n  };\n});\n\nexport const App:React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosWithUsers);\n  const [title, setTitle] = useState('');\n  const [userName, setUserName] = useState('');\n  const [hasTitleError, setIsEmptyTitle] = useState(false);\n  const [hasUserError, setIsEmptyUser] = useState(false);\n\n  const nextId = () => {\n    const todosIds = todos.map(todo => todo.id);\n\n    return (Math.max(...todosIds) + 1);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserName('');\n  };\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    const reg = /[^A-Za-z0-9a-—è ]/;\n\n    setIsEmptyTitle(false);\n\n    setTitle(value.replace(reg, ''));\n  };\n\n  const handleUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setIsEmptyUser(false);\n\n    setUserName(value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const user = usersFromServer.find(selectUser => (\n      selectUser.name === userName\n    )) || null;\n\n    setIsEmptyTitle(!title);\n\n    setIsEmptyUser(!userName);\n\n    const newTodo: Todo = {\n      id: nextId(),\n      title: title.trim(),\n      completed: false,\n      userId: user?.id || null,\n      user,\n    };\n\n    if (user && title) {\n      setTodos(current => [...current, newTodo]);\n      resetForm();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form\n        onSubmit={handleSubmit}\n        action=\"/api/users\"\n        method=\"POST\"\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitle}\n          />\n          {hasTitleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={userName}\n            onChange={handleUser}\n          >\n            <option\n              defaultValue=\"Choose a user\"\n              disabled\n              value=\"\"\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.name}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}